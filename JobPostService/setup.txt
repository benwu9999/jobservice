#########################################
# setup project using pycharm
#########################################
1. This project requires Django which requires MYSQL dependency
install MYSQL dependency (probably a "native" lib)
2. setup MYSQL for data storage, you can either method a) or b)
 a) connect to Google Cloud's SQL instance using Google's "Cloud SQL Proxy"
    See https://cloud.google.com/python/django/appengine
 b) install MYSQL on your local machine, make sure it's running
    a. login to mysql client as root, password for root should be 'root', run this command and
    type in the password when prompted:
    mysql -u root -p
    b. create database , in mysql client(in terminal type "mysql"), run this command:
    create database job_post;
    c. create user to access the new database, this user is from settings.py in this project
    in mysql client, create the user along with password, user and password should match settings.py
    i.e.:
    grant all privileges on job_post.* to 'oneseek'@'localhost' identified by "jobpost8531162";
 c) when creating database for this project, use character set UTF8 to support Chinese characters:
    i.e., if the database job_post already exists, to set it to use UTF8 character set, run this command in mysql client:
    ALTER DATABASE job_post CHARACTER SET utf8 COLLATE utf8_general_ci;
 d) add binary fulltext index to job post table
    ALTER TABLE job_post.job_post ADD FULLTEXT INDEX FullTextIdx (title ASC,  description ASC) with PARSER ngram;
    test the fulltext index added:
    SELECT * FROM job_post.job_post WHERE MATCH (title,description) AGAINST ('search_term_1 +search_term_2' IN BOOLEAN MODE);
sudo apt-get install libmysqlclient-dev
3. In pycharm python integration tools, point pycharm to look at
requirements.txt
4. install pop up should appear in pycharm, install the dependency
5. run manage.py runserver


#########################################
# how to add message to jinja template
#########################################
1. add new message in po files
2. create mo file using msgfmt, i.e. command is "msgfmt po_file", i.e: msgfmt messages.po

#########################################
# migrate database changes to google cloud sql
#########################################

1. add a database entry in the settings file (this should be part of the code) and mapping the ssl key files, i.e.:

    DATABASES = {
            'default': {
                ...
            },
            'prod': {
                'ENGINE': 'django.db.backends.mysql',
                'HOST': '35.185.70.133',
                'PORT': '3306',
                'NAME': 'job_post',
                'USER': 'oneseek',
                'PASSWORD': 'jobpost8531162',
                'OPTIONS': {
                    'ssl': {
                        # replace the paths here with your files
                        'key': '/home/beanryu/Downloads/client-key.pem',
                        'cert': '/home/beanryu/Downloads/client-cert.pem',
                        'ca': '/home/beanryu/Downloads/server-ca.pem',
                    }
                }
            }
        }
2. run migration against the database (might need to run makemigration first if haven't done so):
command to run: python manage.py migrate --database=<NAME_OF_GOOGLE_CLOUD_SQL_DATABASE>
i.e. with the database entry in the example above:  python manage.py migrate --database=prod